class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& start, vector<int>& end) {
        int n=start.size();
        multiset<int>ms;
        ms.insert(start[0]);
        ms.insert(eventTime-end[n-1]);
        for(int i=1;i<n;i++){
            ms.insert(start[i]-end[i-1]);
        }  
        int res=0;
        for(int i=0;i<n;i++){
            int left=(i==0?start[0]:start[i]-end[i-1]);
            int right=(i==n-1?eventTime-end[n-1]:start[i+1]-end[i]);
            ms.erase(ms.find(left)); ms.erase(ms.find(right));
            int last=*ms.rbegin();
            if(last>=(end[i]-start[i])){
                res=max(res,left+right+(end[i]-start[i]));
            }
            else{
                res=max(res,left+right);
            }
            ms.insert(left); ms.insert(right);
        } 
        return res;     
    }
};
